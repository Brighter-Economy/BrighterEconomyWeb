@page "/Items"

<MudStack Row="true" StretchItems="StretchItems.None" Justify="Justify.Center" AlignItems="AlignItems.Center" Class="pa-4">
    <MudTable T="ItemMarketTable"
              Items="@ItemMarketTableData"
              Hover="true"
              Breakpoint="Breakpoint.Xs"
              OnRowClick="RowClickEvent"
              Class="rounded-lg">
        <HeaderContent>
            <MudTh>
                <MudIcon Icon="@Icons.Material.Filled.Diamond"/>
            </MudTh>
            <MudTh>Item Name</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Item Picture">
                <MudIcon Icon="@Icons.Material.Filled.Diamond"/>
            </MudTd>
            <MudTd DataLabel="Item Name">@context.itemName</MudTd>
        </RowTemplate>
    </MudTable>
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h3">Price Over Time</MudText>
        <MudChart ChartType="ChartType.Line"
                  ChartSeries="@ItemPriceSeries"
                  @bind-SelectedIndex="Index"
                  XAxisLabels="@XAxisLabels"
                  Width="100%" Height="70vh"
                  ChartOptions="@Options"/>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
            <MudButton>Placeholder 1</MudButton>
            <MudButton>Placeholder 2</MudButton>
            <MudButton>Placeholder 3</MudButton>
        </MudButtonGroup>
    </MudStack>
</MudStack>

@code {
    private int Index = -1;
    public ChartOptions Options = new ChartOptions();
    public string[] XAxisLabels = new string[30];
    
    public List<ChartSeries> ItemPriceSeries = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Diamond", Data = RandomHist()},
        new ChartSeries() {Name = "Carrots", Data = RandomHist()},
        new ChartSeries() {Name = "Waystone", Data = RandomHist()},
    };

    private List<ItemMarketTable> ItemMarketTableData = new List<ItemMarketTable>();

    protected override void OnInitialized()
    {
        // setting chart options
        Options.InterpolationOption = InterpolationOption.Straight;
        Options.YAxisTicks = 5;
        Options.LineStrokeWidth = 2;
        
        SetDataTemp();
        // sets the axis labels
        for (int i = 29; i >= 0; i--)
        {
            XAxisLabels[i] = i.ToString();
        }
    }
    
    // placeholder to set the data in the side table manually with filler information
    private void SetDataTemp()
    {
        ItemMarketTableData.Add(new ItemMarketTable("minecraft:diamond", "Diamond"));
        ItemMarketTableData.Add(new ItemMarketTable("minecraft:carrot", "Carrot"));
        ItemMarketTableData.Add(new ItemMarketTable("waystones:waystone", "Waystone"));
    }
    
    // placeholder to fill random data
    private static double[] RandomHist()
    {
        Random randObj = new Random();
        double[] randomDoubles = new double[30];
        for (int i = 0; i < 30; i++)
        {
            randomDoubles[i] = randObj.NextDouble() * 100;
        }

        return randomDoubles;
    }

    private void RowClickEvent(TableRowClickEventArgs<ItemMarketTable> eventArgs)
    {
        //show or hide the entries in the chart here
    }
    
    

}